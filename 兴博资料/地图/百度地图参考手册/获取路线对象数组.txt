折线将一系列坐标指定为 LatLng 对象的数组。要检索这些坐标，可调用 Polyline 的 getPath()，它会传回 MVCArray 类型的数组。同样，您可以使用以下操作处理和检查数组：

?getAt() 用于在指定的索引值（从零开始）处传回 LatLng。 
?insertAt() 用于在指定索引值（从零开始）处插入所传递的 LatLng。注意，该索引值的所有现有坐标均向前移动。 
?removeAt() 用于在指定的索引值（从零开始）处删除 LatLng。 
注意：不能只是使用语法 mvcArray[i] 检索数组的第 i 个元素，而必须使用 mvcArray.getAt(i)。

以下代码创建了一幅交互式地图，其中的折线是根据用户的点击构造的。请注意，只有当折线的 path 属性包含两个 LatLng 坐标时，折线才会显示。

标签： Google Map 折线 Polyline 代码片段(2) [全屏查看所有代码] 
1. [代码]js代码     跳至 [1] [2] [全屏预览] 
view sourceprint?
01 var poly;  

02 var map;  

03    

04 function initialize() {  

05   var chicago = new google.maps.LatLng(41.879535, -87.624333);  

06   var myOptions = {  

07     zoom: 7,  

08     center: chicago,  

09     mapTypeId: google.maps.MapTypeId.ROADMAP  

10   };  

11    

12   map = new google.maps.Map(document.getElementById('map_canvas'), myOptions);  

13    

14   var polyOptions = {  

15     strokeColor: '#000000',  

16     strokeOpacity: 1.0,  

17     strokeWeight: 3  

18   }  

19   poly = new google.maps.Polyline(polyOptions);  

20   poly.setMap(map);  

21    

22   // Add a listener for the click event  

23   google.maps.event.addListener(map, 'click', addLatLng);  

24 }  

25    

26 /**  

27  * Handles click events on a map, and adds a new point to the Polyline.  

28  * @param {MouseEvent} mouseEvent  

29  */ 

30 function addLatLng(event) {  

31    

32   var path = poly.getPath();  

33    

34   // Because path is an MVCArray, we can simply append a new coordinate  

35   // and it will automatically appear  

36   path.push(event.latLng);  

37    

38   // Add a new marker at the new plotted point on the polyline.  

39   var marker = new google.maps.Marker({  

40     position: event.latLng,  

41     title: '#' + path.getLength(),  

42     map: map  

43   });  

44 } 
2. [文件] polyline-complex.html ~ 2KB     下载(137)     跳至 [1] [2] [全屏预览] 
view sourceprint?
01 <!DOCTYPE html>  

02 <html>  

03 <head>  

04 <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />  

05 <meta http-equiv="content-type" content="text/html; charset=UTF-8"/>  

06 <title>Google Maps JavaScript API v3 Example: Polyline Complex</title>  

07 <link href="http://code.google.com/apis/maps/documentation/javascript/examples/default.css" rel="stylesheet" type="text/css" />  

08 <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>  

09 <script type="text/javascript">  

10    

11   var poly;  

12   var map;  

13    

14   function initialize() {  

15     var chicago = new google.maps.LatLng(41.879535, -87.624333);  

16     var myOptions = {  

17       zoom: 7,  

18       center: chicago,  

19       mapTypeId: google.maps.MapTypeId.ROADMAP  

20     };  

21    

22     map = new google.maps.Map(document.getElementById('map_canvas'), myOptions);  

23    

24     var polyOptions = {  

25       strokeColor: '#000000',  

26       strokeOpacity: 1.0,  

27       strokeWeight: 3  

28     }  

29     poly = new google.maps.Polyline(polyOptions);  

30     poly.setMap(map);  

31    

32     // Add a listener for the click event  

33     google.maps.event.addListener(map, 'click', addLatLng);  

34   }  

35    

36   /**  

37    * Handles click events on a map, and adds a new point to the Polyline.  

38    * @param {MouseEvent} mouseEvent  

39    */  

40   function addLatLng(event) {  

41    

42     var path = poly.getPath();  

43    

44     // Because path is an MVCArray, we can simply append a new coordinate  

45     // and it will automatically appear  

46     path.push(event.latLng);  

47    

48     // Add a new marker at the new plotted point on the polyline.  

49     var marker = new google.maps.Marker({  

50       position: event.latLng,  

51       title: '#' + path.getLength(),  

52       map: map  

53     });  

54   }  

55    

56 </script>  

57 </head>  

58 <body onload="initialize()">  

59   <div id="map_canvas"></div>  

60 </body>  

61 </html> 
