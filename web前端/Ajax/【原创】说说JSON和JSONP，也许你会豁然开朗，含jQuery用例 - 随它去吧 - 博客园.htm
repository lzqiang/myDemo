
<!DOCTYPE html>
<html lang="zh-cn">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>【原创】说说JSON和JSONP，也许你会豁然开朗，含jQuery用例 - 随它去吧 - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=03KQeESEmpLfzDqUo0NiWUg5Zd5aRam3JHBZTK05Wug1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/KJC/bundle-KJC.css?v=SBtLze_k2f8QMx9yu0UzPZOmkUXedeg_e6WBRIadVBo1"/>
<link id="mobile-style" media="only screen and (max-width: 768px)" type="text/css" rel="stylesheet" href="/skins/KJC/bundle-KJC-mobile.css?v=DRipxhxolKybd8XSb66Ua_qwFS02EoAKXmtCkV5J0Rs1"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/dowinning/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/dowinning/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/dowinning/wlwmanifest.xml"/>
<script src="//common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'dowinning', cb_enable_mathjax=false;var isLogined=false;</script>
<script src="/bundles/blog-common.js?v=hH1lCMV8WaIu271Nx7jPuv36TENW9-RsSxziLxUpjtc1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<table class="Framework" cellspacing="0" cellpadding="0" width="100%">
	<tr>
		<td colspan="3">
			
<div id="top">
<table cellpadding="10" cellspacing="0">
	<tr>
		<td nowrap>
			<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/dowinning/">随它去吧</a></h1>
			
		</td>
	</tr>
</table>
</div>
<div id="sub">
	<div id="sub-right"><div id="blog_stats">
<div class="BlogStats">posts - 21, comments - 410, trackbacks - 0, articles - 0</div></div></div>
	
&nbsp;
<a id="blog_nav_sitehome" href="http://www.cnblogs.com/">博客园</a> :: 
<a id="blog_nav_myhome" href="http://www.cnblogs.com/dowinning/">首页</a> ::
<a id="blog_nav_newpost" rel="nofollow" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a> ::
<a id="blog_nav_contact" accesskey="9" rel="nofollow" href="https://msg.cnblogs.com/send/%E9%9A%8F%E5%AE%83%E5%8E%BB%E5%90%A7">联系</a> ::
<a id="blog_nav_rss" href="http://www.cnblogs.com/dowinning/rss">订阅</a>
<a id="blog_nav_rss_image" class="XMLLink" href="http://www.cnblogs.com/dowinning/rss"><img src="//www.cnblogs.com/images/xml.gif" alt="订阅" /></a> ::
<a id="blog_nav_admin" rel="nofollow" href="https://i.cnblogs.com/">管理</a>

</div>
		</td>
	</tr>
	<tr>
		<td class="LeftCell">
			<div id="leftmenu">
            	
		            <div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
		            
<div id=cell>
<img src="/Skins/KJC/Images/icon-group.jpg" hspace=5 align=left vspace=2><h3>公告</h3>
<div id=news>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>
</div>

	            
	            <div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
		</td>
		<td class="MainCell">
			<div id="main">
				
<div id="post_detail">
	<div class="post">
		<div class="posthead">
			<h2>
				<a id="cb_post_title_url" class="singleposttitle" href="http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html">【原创】说说JSON和JSONP，也许你会豁然开朗，含jQuery用例</a>
			</h2>
 			Posted on <span id="post-date">2012-04-19 23:37</span> <a href='http://www.cnblogs.com/dowinning/'>随它去吧</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="https://i.cnblogs.com/EditPosts.aspx?postid=2458624" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(2458624);return false;">收藏</a>
			<script type="text/javascript">var allowComments=true,cb_blogId=93299,cb_entryId=2458624,cb_blogApp=currentBlogApp,cb_blogUserGuid='f4adcde7-0eb4-e011-8673-842b2b196315',cb_entryCreatedDate='2012/4/19 23:37:00';loadViewCount(cb_entryId);</script>
			
		</div>
		<div class="postbody"><div id="cnblogs_post_body"><table style="width: 100%; height: 40px; background-color: #276998; border: solid 0px white; color: #fff; font-size: 20px; font-family: 微软雅黑;" border="0" cellpadding="2">
<tbody>
<tr>
<td>&nbsp;<span style="color: #ffffff; font-size: 18pt;">前言：</span></td>
</tr>
</tbody>
</table>
<p><span style="font-size: 14px;">&nbsp;</span></p>
<p><span style="font-size: 14px;">说到AJAX就会不可避免的面临两个问题，<span style="color: #0000ff;">第一个是AJAX以何种格式来交换数据？第二个是跨域的需求如何解决？</span>这两个问题目前都有不同的解决方案，比如数据可以用自定义字符串或者用XML来描述，跨域可以通过服务器端代理来解决。</span></p>
<p><span style="font-size: 14px;">但到目前为止最被推崇或者说首选的方案还是<span style="color: #0000ff;">用JSON来传数据，靠JSONP来跨域</span>。而这就是本文将要讲述的内容。</span></p>
<p><span style="font-size: 14px;">&nbsp;</span></p>
<p><span style="font-size: 14px;">JSON和JSONP虽然只有一个字母的差别，但其实他们根本不是一回事儿：JSON是一种数据交换格式，而JSONP是一种依靠开发人员的聪明才智创造出的一种非官方跨域数据交互协议。我们拿最近比较火的谍战片来打个比方，JSON是地下党们用来书写和交换情报的&ldquo;暗号&rdquo;，而JSONP则是把用暗号书写的情报传递给自己同志时使用的接头方式。看到没？一个是描述信息的格式，一个是信息</span>传递双方约定的方法。</p>
<p>&nbsp;</p>
<p><span style="font-size: 14px;">既然随便聊聊，那我们就不再采用教条的方式来讲述，而是把关注重心放在帮助开发人员理解是否应当选择使用以及如何使用上。</span></p>
<p><span style="font-size: 14px;">&nbsp;</span></p>
<table style="width: 100%; height: 40px; background-color: #276998; border: solid 0px white; color: #fff; font-size: 20px; font-family: 微软雅黑;" border="0" cellpadding="2">
<tbody>
<tr>
<td>&nbsp;<span style="color: #ffffff; font-size: 18pt;">什么是JSON？</span></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><span style="font-size: 14px;">前面简单说了一下，JSON是一种基于文本的数据交换方式，或者叫做数据描述格式，你是否该选用他首先肯定要关注它所拥有的优点。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px;"><strong><span style="color: #800000;">JSON的优点：</span></strong></span></p>
<p><span style="font-size: 14px;">1、基于纯文本，跨平台传递极其简单；</span></p>
<p><span style="font-size: 14px;">2、Javascript原生支持，后台语言几乎全部支持；</span></p>
<p><span style="font-size: 14px;">3、轻量级数据格式，占用字符数量极少，特别适合互联网传递；</span></p>
<p><span style="font-size: 14px;">4、可读性较强，虽然比不上XML那么一目了然，但在合理的依次缩进之后还是很容易识别的；</span></p>
<p><span style="font-size: 14px;">5、容易编写和解析，当然前提是你要知道数据结构；</span></p>
<p><span style="font-size: 14px;">JSON的缺点当然也有，但在作者看来实在是无关紧要的东西，所以不再单独说明。</span></p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 16px; color: #800000;">JSON的格式或者叫规则：</span></strong></p>
<p><span style="font-size: 14px;">JSON能够以非常简单的方式来描述数据结构，XML能做的它都能做，因此在跨平台方面两者完全不分伯仲。</span></p>
<p><span style="font-size: 14px;">1、JSON只有两种数据类型描述符，大括号{}和方括号[]，其余英文冒号:是映射符，英文逗号,是分隔符，英文双引号""是定义符。</span></p>
<p><span style="font-size: 14px;">2、大括号{}用来描述一组&ldquo;不同类型的无序键值对集合&rdquo;（每个键值对可以理解为OOP的属性描述），方括号[]用来描述一组&ldquo;相同类型的有序数据集合&rdquo;（可对应OOP的数组）。</span></p>
<p><span style="font-size: 14px;">3、上述两种集合中若有多个子项，则通过英文逗号,进行分隔。</span></p>
<p><span style="font-size: 14px;">4、键值对以英文冒号:进行分隔，并且建议键名都加上英文双引号""，以便于不同语言的解析。</span></p>
<p><span style="font-size: 14px;">5、JSON内部常用数据类型无非就是字符串、数字、布尔、日期、null 这么几个，字符串必须用双引号引起来，其余的都不用，日期类型比较特殊，这里就不展开讲述了，只是建议如果客户端没有按日期排序功能需求的话，那么把日期时间直接作为字符串传递就好，可以省去很多麻烦。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px;"><strong><span style="color: #800000;">JSON实例：</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">//</span><span style="color: #008000;"> 描述一个人</span>

<span style="color: #0000ff;">var</span> person =<span style="color: #000000;"> {
    </span>"Name": "Bob"<span style="color: #000000;">,
    </span>"Age": 32<span style="color: #000000;">,
    </span>"Company": "IBM"<span style="color: #000000;">,
    </span>"Engineer": <span style="color: #0000ff;">true</span><span style="color: #000000;">
}

</span><span style="color: #008000;">//</span><span style="color: #008000;"> 获取这个人的信息</span>

<span style="color: #0000ff;">var</span> personAge =<span style="color: #000000;"> person.Age;

</span><span style="color: #008000;">//</span><span style="color: #008000;"> 描述几个人</span>

<span style="color: #0000ff;">var</span> members =<span style="color: #000000;"> [
    {
        </span>"Name": "Bob"<span style="color: #000000;">,
        </span>"Age": 32<span style="color: #000000;">,
        </span>"Company": "IBM"<span style="color: #000000;">,
        </span>"Engineer": <span style="color: #0000ff;">true</span><span style="color: #000000;">
    },
    {
        </span>"Name": "John"<span style="color: #000000;">,
        </span>"Age": 20<span style="color: #000000;">,
        </span>"Company": "Oracle"<span style="color: #000000;">,
        </span>"Engineer": <span style="color: #0000ff;">false</span><span style="color: #000000;">
    },
    {
        </span>"Name": "Henry"<span style="color: #000000;">,
        </span>"Age": 45<span style="color: #000000;">,
        </span>"Company": "Microsoft"<span style="color: #000000;">,
        </span>"Engineer": <span style="color: #0000ff;">false</span><span style="color: #000000;">
    }
]

</span><span style="color: #008000;">//</span><span style="color: #008000;"> 读取其中John的公司名称</span>

<span style="color: #0000ff;">var</span> johnsCompany = members[1<span style="color: #000000;">].Company;

</span><span style="color: #008000;">//</span><span style="color: #008000;"> 描述一次会议</span>

<span style="color: #0000ff;">var</span> conference =<span style="color: #000000;"> {
    </span>"Conference": "Future Marketing"<span style="color: #000000;">,
    </span>"Date": "2012-6-1"<span style="color: #000000;">,
    </span>"Address": "Beijing"<span style="color: #000000;">,
    </span>"Members"<span style="color: #000000;">: 
    [
        {
            </span>"Name": "Bob"<span style="color: #000000;">,
            </span>"Age": 32<span style="color: #000000;">,
            </span>"Company": "IBM"<span style="color: #000000;">,
            </span>"Engineer": <span style="color: #0000ff;">true</span><span style="color: #000000;">
        },
        {
            </span>"Name": "John"<span style="color: #000000;">,
            </span>"Age": 20<span style="color: #000000;">,
            </span>"Company": "Oracle"<span style="color: #000000;">,
            </span>"Engineer": <span style="color: #0000ff;">false</span><span style="color: #000000;">
        },
        {
            </span>"Name": "Henry"<span style="color: #000000;">,
            </span>"Age": 45<span style="color: #000000;">,
            </span>"Company": "Microsoft"<span style="color: #000000;">,
            </span>"Engineer": <span style="color: #0000ff;">false</span><span style="color: #000000;">
        }
    ]
}

</span><span style="color: #008000;">//</span><span style="color: #008000;"> 读取参会者Henry是否工程师</span>

<span style="color: #0000ff;">var</span> henryIsAnEngineer = conference.Members[2].Engineer;</pre>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 14px;">关于JSON，就说这么多，更多细节请在开发过程中查阅资料深入学习。</span></p>
<p>&nbsp;</p>
<table style="width: 100%; height: 40px; background-color: #276998; border: solid 0px white; color: #fff; font-size: 20px; font-family: 微软雅黑;" border="0" cellpadding="2">
<tbody>
<tr>
<td>&nbsp;<span style="color: #ffffff; font-size: 18pt;">什么是JSONP？</span></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><span style="font-size: 16px;"><strong><span style="color: #800000;">先说说JSONP是怎么产生的：</span></strong></span></p>
<p><span style="font-size: 14px;">其实网上关于JSONP的讲解有很多，但却千篇一律，而且云里雾里，对于很多刚接触的人来讲理解起来有些困难，小可不才，试着用自己的方式来阐释一下这个问题，看看是否有帮助。</span></p>
<p><span style="font-size: 14px;">1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；</span></p>
<p><span style="font-size: 14px;">2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有"src"这个属性的标签都拥有跨域的能力，比如&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;）；</span></p>
<p><span style="font-size: 14px;">3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；</span></p>
<p><span style="font-size: 14px;">4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；</span></p>
<p><span style="font-size: 14px;">5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。</span></p>
<p><span style="font-size: 14px;">6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。</span></p>
<p><span style="font-size: 14px;">7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</span></p>
<p><span style="font-size: 14px;">如果对于callback参数如何使用还有些模糊的话，我们后面会有具体的实例来讲解。</span></p>
<p><br /><br /></p>
<p><span style="font-size: 16px;"><strong><span style="color: #800000;">JSONP的客户端具体实现：</span></strong></span></p>
<p><span style="font-size: 14px;">不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 14px;">1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。</span></p>
<p><span style="font-size: 14px;">远程服务器remoteserver.com根目录下有个remote.js文件代码如下：</span></p>
<div class="cnblogs_code">
<pre>alert('我是远程文件');</pre>
</div>
<p><span style="font-size: 14px;">本地服务器localserver.com下有个jsonp.html页面代码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;!</span><span style="color: #ff00ff;">DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html </span><span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">="http://www.w3.org/1999/xhtml"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text/javascript"</span><span style="color: #ff0000;"> src</span><span style="color: #0000ff;">="http://remoteserver.com/remote.js"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>

<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p><span style="font-size: 14px;">毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 14px;">2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。</span></p>
<p><span style="font-size: 14px;">jsonp.html页面代码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;!</span><span style="color: #ff00ff;">DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html </span><span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">="http://www.w3.org/1999/xhtml"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text/javascript"</span><span style="color: #0000ff;">&gt;</span>
<span style="background-color: #f5f5f5; color: #0000ff;">    var</span><span style="background-color: #f5f5f5; color: #000000;"> localHandler </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(data){
        alert(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：</span><span style="background-color: #f5f5f5; color: #000000;">'</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> data.result);
    };
    </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text/javascript"</span><span style="color: #ff0000;"> src</span><span style="color: #0000ff;">="http://remoteserver.com/remote.js"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>

<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p><span style="font-size: 14px;">remote.js文件代码如下：</span></p>
<div class="cnblogs_code">
<pre>localHandler({"result":"我是远程js带来的数据"});</pre>
</div>
<p><span style="font-size: 14px;">运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。</span></p>
<p><span style="font-size: 14px;">&nbsp;</span></p>
<p><span style="font-size: 14px;">3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端&ldquo;我想要一段调用XXX函数的js代码，请你返回给我&rdquo;，于是服务器就可以按照客户端的需求来生成js脚本并响应了。</span></p>
<p><span style="font-size: 14px;">看jsonp.html页面的代码：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;!</span><span style="color: #ff00ff;">DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html </span><span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">="http://www.w3.org/1999/xhtml"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text/javascript"</span><span style="color: #0000ff;">&gt;</span>
    <span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;"> 得到航班信息查询结果后的回调函数</span>
    <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> flightHandler </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(data){
        alert(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">你查询的航班结果是：票价 </span><span style="background-color: #f5f5f5; color: #000000;">'</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> data.price </span><span style="background-color: #f5f5f5; color: #000000;">+</span> <span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;"> 元，</span><span style="background-color: #f5f5f5; color: #000000;">'</span> <span style="background-color: #f5f5f5; color: #000000;">+</span> <span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">余票 </span><span style="background-color: #f5f5f5; color: #000000;">'</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> data.tickets </span><span style="background-color: #f5f5f5; color: #000000;">+</span> <span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;"> 张。</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
    };
    </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;"> 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span>
    <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> url </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">;
    </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;"> 创建script标签，设置其属性</span>
    <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> script </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> document.createElement(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">script</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
    script.setAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">src</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, url);
    </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;"> 把script标签加入head，此时调用开始</span>
<span style="background-color: #f5f5f5; color: #000000;">    document.getElementsByTagName(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">head</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">)[</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">].appendChild(script); 
    </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>

<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p><span style="font-size: 14px;">这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。</span></p>
<p><span style="font-size: 14px;">我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。</span></p>
<p><span style="font-size: 14px;">OK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">flightHandler({
    </span>"code": "CA1998"<span style="color: #000000;">,
    </span>"price": 1780<span style="color: #000000;">,
    </span>"tickets": 5<span style="color: #000000;">
});</span></pre>
</div>
<p><span style="font-size: 14px;">我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！</span></p>
<p><span style="font-size: 14px;">&nbsp;</span></p>
<p><span style="font-size: 14px;">4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。</span></p>
<p><span style="font-size: 14px;">什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;!</span><span style="color: #ff00ff;">DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span style="color: #0000ff;">&gt;</span>
 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html </span><span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">="http://www.w3.org/1999/xhtml"</span> <span style="color: #0000ff;">&gt;</span>
 <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>Untitled Page<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>
      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text/javascript"</span><span style="color: #ff0000;"> src</span><span style="color: #0000ff;">=jquery.min.js"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text/javascript"</span><span style="color: #0000ff;">&gt;</span><span style="background-color: #f5f5f5; color: #000000;">
     jQuery(document).ready(</span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(){ <br />        $.ajax({
             type: </span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">get</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">,
             async: </span><span style="background-color: #f5f5f5; color: #0000ff;">false</span><span style="background-color: #f5f5f5; color: #000000;">,
             url: </span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">,
             dataType: </span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">jsonp</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">,
             jsonp: </span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">callback</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span>
<span style="background-color: #f5f5f5; color: #000000;">             jsonpCallback:</span><span style="background-color: #f5f5f5; color: #000000;">"flightHandler</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据</span>
<span style="background-color: #f5f5f5; color: #000000;">             success: </span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(json){
                 alert('您查询到航班信息：票价： ' + json.price + ' 元，余票： ' + json.tickets + ' 张。');</span><span style="background-color: #f5f5f5; color: #000000;">
             },
             error: </span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(){
                 alert(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">fail</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
             }
         });
</span><span style="background-color: #f5f5f5; color: #000000;">     });
     </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
  <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
 <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p><span style="font-size: 14px;">是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？</span></p>
<p><span style="font-size: 14px;">&nbsp;</span></p>
<p><span style="font-size: 14px;">好啦，写到这里，我已经无力再写下去，又困又累，得赶紧睡觉。朋友们要是看这不错，觉得有启发，给点个&ldquo;推荐&rdquo;呗！由于实在比较简单，所以就不再提供demo源码下载了。</span></p>
<p><span style="font-size: 14px;">&nbsp;</span></p>
<table style="width: 100%; height: 40px; background-color: #276998; border: solid 0px white; color: #fff; font-size: 20px; font-family: 微软雅黑;" border="0" cellpadding="2">
<tbody>
<tr>
<td>&nbsp;<span style="color: #ffffff; font-size: 18pt;">4月20日下午的补充：</span></td>
</tr>
</tbody>
</table>
<p><span style="color: #ff0000; font-size: 14px;"><strong><span lang="EN-US">&nbsp;</span></strong></span></p>
<p><span style="font-size: 14px; color: #000000;"><span lang="EN-US">没想到上了博客园的头条推荐。看到大家对这篇文章的认可和评论，还是很开心的，这里针对ajax与jsonp的异同再做一些补充说明：</span></span></p>
<p><span style="font-size: 14px; color: #000000;"><span lang="EN-US">1、ajax和jsonp这两种技术在调用方式上<span style="color: #0000ff;">&ldquo;看起来&rdquo;</span>很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；</span></span></p>
<p><span style="font-size: 14px; color: #000000;"><span lang="EN-US">2、但ajax和jsonp其实本质上是不同的东西。<span style="color: #0000ff;">ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加&lt;script&gt;标签来调用服务器提供的js脚本</span>。</span></span></p>
<p><span style="font-size: 14px; color: #000000;"><span lang="EN-US">3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。</span></span></p>
<p><span style="font-size: 14px; color: #000000;"><span lang="EN-US">4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。</span></span></p>
<p><span style="font-size: 14px; color: #000000;"><span lang="EN-US">总而言之，jsonp不是ajax的一个特例，哪怕jquery等巨头把jsonp封装进了ajax，也不能改变着一点！</span></span></p>
<p><span style="color: #ff0000; font-size: 14px;"><strong><span lang="EN-US">&nbsp;</span></strong></span></p>
<p><span style="color: #ff0000; font-size: 14px;"><strong><span lang="EN-US">注意：此文章属博主原创，转载请注明作者信息和原始链接，谢谢合作。</span></strong></span></p>
<p><span style="color: #0000ff; font-size: 14px;"><strong>&nbsp;</strong></span></p>
<p><span style="color: #0000ff; font-size: 14px;"><strong>&nbsp;</strong></span></p>
<p><span style="color: #0000ff; font-size: 14px;"><strong>&nbsp;</strong></span></p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>

</div>
	</div></div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id='comment_form' class='commentform'>
<a name='commentform'></a>
<div id='divCommentShow'></div>
<div id='comment_nav'><span id='span_refresh_tips'></span><a href='javascript:void(0);' onclick='return RefreshCommentList();' id='lnk_RefreshComments' runat='server' clientidmode='Static'>刷新评论</a><a href='#' onclick='return RefreshPage();'>刷新页面</a><a href='#top'>返回顶部</a></div>
<div id='comment_form_container'></div>
<div class='ad_text_commentbox' id='ad_text_under_commentbox'></div>
<div id='ad_t2'></div>
<div id='opt_under_post'></div>
<div id='ad_c1' class='c_ad_block'></div>
<div id='under_post_news'></div>
<div id='ad_c2' class='c_ad_block'></div>
<div id='under_post_kb'></div>
<div id='HistoryToday' class='c_ad_block'></div>
<script type='text/javascript'>
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverAdT2();
    deliverAdC1();
    deliverAdC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);   
</script>
</div>


			</div>
		</td>
	</tr>
	<tr>
		<td colspan="2" class="FooterCell">
			
<p id="footer">
	Powered by: 
	<br />
	
	<a id="Footer1_Hyperlink3" NAME="Hyperlink1" href="http://www.cnblogs.com/" style="font-family:Verdana;font-size:12px;">博客园</a>
	<br />
	Copyright &copy; 随它去吧
</p>

		</td>
	</tr>
</table>

</body>
</html>
